# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build UI

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: self-hosted

    steps:
      # Step 1: Checkout the source code
      - name: Checkout source repository
        uses: actions/checkout@v3

      # Step 2: Set up your language environment (example: Node.js)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      
      - name: Create .env file
        run: |
          echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY}}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      # Step 4 Log in / build / push to registry
      # - name: Log in to Docker registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry:  ${{ secrets.DOCKER_REGISTRY }}  # Docker registry
      #     username: ${{ secrets.DOCKER_USERNAME }}  # Docker username
      #     password: ${{ secrets.DOCKER_PASSWORD }}  # Docker password or token
       
      # Build and tag Docker image with remote registry
      - name: Build and tag Docker image
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login https://${{ secrets.DOCKER_REGISTRY }} --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build --no-cache --target production -t ${{secrets.DOCKER_REGISTRY}}/${{ secrets.DOCKER_USERNAME }}/portfolio-ui:${{ github.sha }} .
          docker push  ${{secrets.DOCKER_REGISTRY}}/${{ secrets.DOCKER_USERNAME }}/portfolio-ui:${{ github.sha }}

      # Push the Docker image to the remote private registry
      # - name: Push Docker image to registry
      #   run: |
      #     docker push  ${{secrets.DOCKER_REGISTRY}}/${{ secrets.DOCKER_USERNAME }}/portfolio-ui:${{ github.sha }}
      
      - name: Set up SSH
        run: |
          mkdir -p ~./ssh
          echo "${{ secrets.SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Execute commands
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull nlarson-portfolio.myvnc.com:9443/nlarson/portfolio-ui:latest
            docker stop portfolio-ui || true
            docker rm portfolio-ui || true
            docker run -d --name portfolio-ui -p 3000:3000 \
            nlarson-portfolio.myvnc.com:9443/nlarson/portfolio-ui:latest
          EOF


      # - name: SSH Command
      #   # You may pin to the exact commit or the version.
      #   # uses: D3rHase/ssh-command-action@a2d33a241057592ef36e4e552ff44485201acf10
      #   uses: D3rHase/ssh-command-action@latest
      #   with:
      #     # hostname / IP of the server
      #     host: ${{ secrets.SERVER_IP }}
      #     # ssh port of the server
      #     # user of the server
      #     user: ${{ secrets.SERVER_USERNAME }}
      #     # private ssh key registered on the server
      #     private_key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
      #     # Fingerprint of the server, preventing man-in-the-middle attacks
      #     command: | # optional, default is echo 'Hello world'
      #       docker --version || sudo apt-get install -y docker.io
      #       echo ${{ secrets.DOCKER_PASSWORD }} | docker login https://${{ secrets.DOCKER_REGISTRY }} --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
      #       sudo docker pull ${{secrets.DOCKER_REGISTRY}}/${{ secrets.DOCKER_USERNAME }}/portfolio-ui:${{ github.sha }}
      #       sudo docker stop portfolio-ui || true  # Stop the existing container (if any)
      #       sudo docker rm portfolio-ui || true    # Remove the stopped container (if any)
      #       sudo docker run -d --name portfolio-ui -p 3000:3000 ${{secrets.DOCKER_REGISTRY}}/${{ secrets.DOCKER_USERNAME }}/portfolio-ui:${{ github.sha }}  # Run the new container 
      #
      #
      #
      #
